name: Deploy

on:
  push:
    branches: [ "main" ]

jobs:
  test:
    runs-on: self-hosted

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: dev

      - name: Start PostgreSQL with Podman
        run: |
          podman run -d --name postgres-test \
            -e POSTGRES_DB=kubsu \
            -e POSTGRES_USER=kubsu \
            -e POSTGRES_PASSWORD=kubsu \
            -p 5432:5432 \
            --health-cmd='pg_isready' \
            --health-interval=10s \
            --health-timeout=5s \
            --health-retries=5 \
            postgres:15-alpine

          # Ожидание готовности PostgreSQL
          for i in {1..10}; do
            if podman exec postgres-test pg_isready; then
              echo "PostgreSQL is ready"
              break
            else
              echo "Waiting for PostgreSQL..."
              sleep 5
            fi
          done

      - name: Build container with Podman
        run: |
          podman build -f ./Dockerfile.dev -t ${{ vars.DOCKERHUB_USERNAME }}/python-crud-dev:latest .

      - name: Run tests
        run: |
          podman run --rm --network=host ${{ vars.DOCKERHUB_USERNAME }}/python-crud-dev:latest

  deploy:
    needs: test
    runs-on: self-hosted

    steps:
      - name: Checkout main branch
        uses: actions/checkout@v4
        with:
          ref: main

      - name: Login to Docker Hub with Podman
        run: |
          podman login -u ${{ vars.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }} docker.io

      - name: Build and push with Podman
        run: |
          podman build -f ./Dockerfile.prod -t ${{ vars.DOCKERHUB_USERNAME }}/python-crud:latest .
          podman push ${{ vars.DOCKERHUB_USERNAME }}/python-crud:latest

      - name: Deploy to server via SSH
        uses: appleboy/ssh-action@v1
        with:
          host: ${{ secrets.SSH_HOST }}
          port: ${{ secrets.SSH_PORT }}
          username: ${{ secrets.SSH_USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          script: |
            podman login -u ${{ vars.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }} docker.io

            # Остановка и удаление существующего контейнера
            podman stop python-crud || true
            podman rm python-crud || true

            # Удаление существующего образа
            podman rmi ${{ vars.DOCKERHUB_USERNAME }}/python-crud:latest || true

            # Загрузка нового образа
            podman pull ${{ vars.DOCKERHUB_USERNAME }}/python-crud:latest

            # Запуск нового контейнера
            podman run -d --name python-crud --network host ${{ vars.DOCKERHUB_USERNAME }}/python-crud:latest
            echo "Контейнер успешно развернут!"
